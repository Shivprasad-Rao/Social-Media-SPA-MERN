{"version":3,"sources":["shared/context/auth-context.js","shared/components/FormElements/Button.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/BackDrop.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","Button","props","href","className","size","inverse","danger","children","to","exact","type","onClick","disabled","LoadingSpinner","asOverlay","BackDrop","ReactDOM","createPortal","document","getElementById","logoutTimer","MainHeader","NavLinks","auth","useContext","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","puth","Provider","value","fallback","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b338043.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n    isLoggedIn: false,\r\n    userId: null,\r\n    token: null,\r\n    login: () => { },\r\n    logout: () => { }\r\n});","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './BackDrop.css';\r\n\r\nconst BackDrop = (props) => {\r\n    return (ReactDOM.createPortal(\r\n        <div className=\"backdrop\" onClick={props.onClick}></div>, document.getElementById('backdrop-hook')\r\n    ));\r\n};\r\nexport default BackDrop;","import { useState, useCallback, useEffect } from 'react';\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(false);\r\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\r\n    const [userId, setUserId] = useState(false);\r\n\r\n    const login = useCallback((uid, token, expirationDate) => {\r\n        setToken(token);\r\n        setUserId(uid);\r\n        const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);// + 1hr = (1000ms = 1s)1000 ms * 60 * 60\r\n        setTokenExpirationDate(tokenExpirationDate);\r\n        localStorage.setItem(\r\n            'userData',\r\n            JSON.stringify(\r\n                {\r\n                    userId: uid,\r\n                    token: token,\r\n                    expiration: tokenExpirationDate.toISOString()\r\n                }\r\n            )\r\n        );\r\n    }, []);\r\n\r\n    const logout = useCallback(() => {\r\n        setToken(null);\r\n        setTokenExpirationDate(null);\r\n        setUserId(null);\r\n        localStorage.removeItem('userData');\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (token && tokenExpirationDate) {\r\n            const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n            logoutTimer = setTimeout(logout, remainingTime);\r\n        } else {\r\n            clearTimeout(logoutTimer);\r\n        }\r\n    }, [token, logout, tokenExpirationDate]);\r\n\r\n    useEffect(() => {\r\n        const storedData = JSON.parse(localStorage.getItem('userData'));\r\n        if (storedData &&\r\n            storedData.token &&\r\n            new Date(storedData.expiration) > new Date()\r\n        ) {\r\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n        }\r\n    }, [login]);\r\n\r\n    return { token, login, logout, userId };\r\n};\r\n","import React from 'react';\r\n\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = (props) => {\r\n    return (\r\n        <header className=\"main-header\">{props.children}</header>\r\n    )\r\n};\r\n\r\nexport default MainHeader;","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport Button from '../FormElements/Button';\r\nimport './NavLinks.css';\r\n\r\nconst NavLinks = (props) => {\r\n    const auth = useContext(AuthContext);\r\n\r\n    return (\r\n        <ul className=\"nav-links\">\r\n            <li>\r\n                <NavLink to=\"/\" exact={true}>\r\n                    All Users\r\n                </NavLink>\r\n            </li>\r\n            {auth.isLoggedIn && <li>\r\n                <NavLink to={`/${auth.userId}/places`}>\r\n                    My Places\r\n                </NavLink>\r\n            </li>}\r\n            {auth.isLoggedIn && < li >\r\n                <NavLink to=\"/places/new\">\r\n                    New Place\r\n                </NavLink>\r\n            </li>}\r\n            {!auth.isLoggedIn && < li >\r\n                <NavLink to=\"/auth\">\r\n                    Authenticate\r\n                </NavLink>\r\n            </li >}\r\n            {auth.isLoggedIn && (\r\n                <li>\r\n                    <Button onClick={auth.logout}>Logout</Button>\r\n                </li>\r\n            )}\r\n        </ul >\r\n    );\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport './SideDrawer.css';\r\n\r\nconst SideDrawer = (props) => {\r\n    const content = <CSSTransition\r\n        in={props.show}\r\n        timeout={200}\r\n        classNames=\"slide-in-left\"\r\n        mountOnEnter\r\n        unmountOnExit>\r\n        <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\r\n    </CSSTransition>\r\n    return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\r\n};\r\n\r\nexport default SideDrawer;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport MainHeader from './MainHeader';\r\nimport NavLinks from './NavLinks';\r\nimport SideDrawer from './SideDrawer';\r\nimport BackDrop from '../UIElements/BackDrop';\r\n\r\nimport './MainNavigation.css';\r\n\r\nconst MainNavigation = (props) => {\r\n\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n    const openDrawerHandler = () => {\r\n        setDrawerIsOpen(true);\r\n    }\r\n\r\n    const closeDrawerHandler = () => {\r\n        setDrawerIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {drawerIsOpen ? (\r\n                <BackDrop onClick={closeDrawerHandler} />)\r\n                : null}\r\n            <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n                <nav className=\"main-navigation__drawer-nav\">\r\n                    <NavLinks />\r\n                </nav>\r\n            </SideDrawer>\r\n            <MainHeader>\r\n                <button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\r\n                    <span />\r\n                    <span />\r\n                    <span />\r\n                </button>\r\n                <h1 className=\"main-navigation__title\">\r\n                    <Link to=\"/\">\r\n                        Your Places\r\n                </Link>\r\n                </h1>\r\n                <nav className=\"main-navigation__header-nav\">\r\n                    <NavLinks />\r\n                </nav>\r\n            </MainHeader>\r\n        </ React.Fragment>\r\n    );\r\n};\r\n\r\nexport default MainNavigation;","import React, { Suspense } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\n/* import Users from './user/pages/Users';\nimport UserPlaces from './places/pages/UserPlaces';\nimport NewPlace from './places/pages/NewPlace';\nimport UpdatePlace from './places/pages/UpdatePlace';\nimport Auth from './user/pages/Auth'; */\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\n\nconst Users = React.lazy(() => import('./user/pages/Users'));\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact={true}>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\" exact>\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact={true}>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route puth=\"/auth\" exact={true}>\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense fallback=\n            {\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}